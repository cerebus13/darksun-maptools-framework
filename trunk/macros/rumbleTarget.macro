<!--Get Basic Info and initialize variables-->
[h:debugmode = getLibProperty("DEBUGMODE")]
[h:me=getName()]
[h:calledByPC=isPC(me)]
[h:maxRange=json.get(currentPowerInfo, "maximumRange")]
[h:pName = json.get(currentPowerInfo, "powername")]
[h:pTargets = json.get(currentPowerInfo, "targets")]
[h:attType = json.get(currentPowerInfo, "attackType")]
[h,if(json.get(currentPowerInfo,"requirements")!="" && json.get(currentPowerInfo,"requirements")!="--none--"): pReqs = json.get(currentPowerInfo,"requirements"); pReqs=""]
[h,if(json.get(currentPowerInfo,"hitEffect")!="" && json.get(currentPowerInfo,"hitEffect")!="--none--"): phEff = json.get(currentPowerInfo,"hitEffect"); phEff=""]
[h,if(json.get(currentPowerInfo,"missEffect")!="" && json.get(currentPowerInfo,"missEffect")!="--none--"): pmEff = json.get(currentPowerInfo,"missEffect"); pmEff=""]
[h,if(json.get(currentPowerInfo,"alwaysEffect")!="" && json.get(currentPowerInfo,"alwaysEffect")!="--none--"): paEff = json.get(currentPowerInfo,"alwaysEffect"); paEff=""]
[h:caInfo = json.set("{}", "key", "0")]
[h:coverInfo = json.set("{}", "key", "0")]
[h:targList = ""]
[h:oath = 0]
[h:rangeFilter = json.set("{}", "from", if(attType=="area", 0, 1), "upto", maxRange, "distancePerCell", "false", "metric", "ONE_ONE_ONE")]
[h:reticle = me+"BurstCenter"]

<!--Determine which targeting dialog is needed-->
[h,switch(pTargets),CODE:
case "one creature":
{  
    [targetDialog = 0]
    [targetFilter = json.set("{}", "pc", if(calledByPC, 0, 1), "npc", if(calledByPC, 1, 0), "unsetStates", json.append("[]", "Dead", "Reticle"), "visible", 1, "range", rangeFilter)]
};
case "one or two creatures":
{
    [targetDialog = 1]
     [targetFilter = json.set("{}", "pc", if(calledByPC, 0, 1), "npc", if(calledByPC, 1, 0), "unsetStates", json.append("[]", "Dead", "Reticle"), "visible", 1, "range", rangeFilter)]
};
case "two creatures":
{
    [targetDialog = 1]
     [targetFilter = json.set("{}", "pc", if(calledByPC, 0, 1), "npc", if(calledByPC, 1, 0), "unsetStates", json.append("[]", "Dead", "Reticle"), "visible", 1, "range", rangeFilter)]
};
case "one creature two attacks":
{
    [targetDialog = 1]
     [targetFilter = json.set("{}", "pc", if(calledByPC, 0, 1), "npc", if(calledByPC, 1, 0), "unsetStates", json.append("[]", "Dead", "Reticle"), "visible", 1, "range", rangeFilter)]
};
case "each enemy in burst":
{
    [targetDialog = 2]
    [if(attType == "area"): rangeFilter = json.set(rangeFilter, "token", reticle); rangeFilter = rangeFilter]
     [targetFilter = json.set("{}", "pc", if(calledByPC, 0, 1), "npc", if(calledByPC, 1, 0), "unsetStates", json.append("[]", "Dead", "Reticle"), "visible", 1, "range", rangeFilter)]
};
case "each creature in burst":
{
    [targetDialog = 2]
    [if(attType == "area"): rangeFilter = json.set(rangeFilter, "token", reticle); rangeFilter = rangeFilter]
    [targetFilter = json.set("{}", "unsetStates", json.append("[]", "Dead"), "visible", 1, "range", rangeFilter)]
};
case "targets allies":
{
     [targetDialog = 3]
     [targetFilter = json.set("{}", "pc", if(calledByPC,1,0), "npc", if(calledByPC, 0,1), "unsetStates", json.append("[]", "Dead", "Reticle"), "visible", 1, "range", rangeFilter)]
};
case "personal":
{
    [targetDialog = 4]
    [targetFilter = json.set("{}", "pc", if(calledByPC, 0, 1), "npc", if(calledByPC, 1, 0), "unsetStates", json.append("[]", "Dead", "Reticle"), "visible", 1, "range", rangeFilter)]
};]

[h:exp = getTokenNames("json", targetFilter)]
[h:expList = listSort(json.toList(exp),"N+")]

<!--Powers that target yourself-->
[h,if(pTargets == "personal"):expList=me]

[h,if(expList == ""):assert(0, rangeError(), 0)]

<!--Create Image List of Targets-->
[H: imgList = expList]
[H: Num = listCount(imgList)]
[h,COUNT(Num),CODE:
   {
     [h:targetName=listGet(imgList,roll.count)]
     [h,token(targetName): image=getTokenImage()]
     [h:imgList=listReplace(imgList,roll.count,targetName+" "+image)]
   }]
   
<!--Build the first line of the targeting dialog-->

[h:inputParams = json.append("[]", "basicStuff|Attack Basics||TAB|SELECT=1","junk|<html><b>Use Power: "+pName+"</b></html>||LABEL|SPAN=TRUE")]


<!--Switch through the targeting options to build the proper dialog contents for different target lists-->

[h,switch(targetDialog),CODE:
case 0: {[inputParams = json.append(inputParams, "targetNum|"+imgList+"|Select Target|LIST|SELECT=0 ICON=TRUE ICONSIZE=30")]};
case 1: {[inputParams = json.append(inputParams, "junk|<html><i>Select same target twice to target both attacks on a single creature</i></html>||LABEL|SPAN=TRUE",
	"target1|"+imgList+"|Select Target 1|LIST|SELECT=0 ICON=TRUE ICONSIZE=30",
	"target2|"+imgList+"|Select Target 2|LIST|SELECT=0 ICON=TRUE ICONSIZE=30")]};
case 2:
{
	[foreach(target, expList),CODE:
	{
	     [token(target): targImg = getTokenImage()]
	     [inputParams = json.append(inputParams, "target"+roll.count+"|1|<html><img src='"+targImg+"' height='30' width='30'' align='middle'></img> &nbsp;&nbsp;&nbsp; "+target+"</html>|CHECK")]
	}]
};
case 3:
{
	[foreach(target, expList),CODE:
	{
	     [token(target): targImg = getTokenImage()]
	     [inputParams = json.append(inputParams, "target"+roll.count+"|1|<html><img src='"+targImg+"' height='30' width='30'' align='middle'></img> &nbsp;&nbsp;&nbsp; "+target+"</html>|CHECK")]
	}]
};
case 4:
 {
    [inputParams = json.append(inputParams, ".|Range: Personal||LABEL|SPAN=TRUE")]
    [diffCA = 0]
    [diffCover = 0]
    [cover = "null"]
    [MiscBonus = 0]
    [MiscPenalty = 0]
    [mdb = 0]
    [optMods = 0]
    [tmpExpandCrit = 0]
    [critRange = 0]
    [markOn = 0]
    [rollTwice = 0]
};]

[h,if(targetDialog != 4),CODE:
{
[inputParams = json.append(inputParams, 
	".|---------------------------------------------------------------------------------------------------||LABEL|SPAN=TRUE",
    "diffCA|0| Combat Advantage (vs. some or all targets)|CHECK",
    if(targetDialog == 0, "cover|None,Regular(-2),Superior(-5)|Target's cover|LIST|SELECT=0", "diffCover|0|Some or all targets have cover|CHECK"),
	"MiscBonus|0|<html>Miscellaneous <b>bonus</b> to attack",
	"MiscPenalty|0|<html>Miscellaneous <b>penalty</b> to attack</html>",
	"mdb|0|Miscellaneous modifier to damage")]
                     	[h,if(pReqs != "" || phEff != "" || pmEff != "" || (paEff != "" && targetDialog !=4) ): inputParams = json.append(inputParams, ".|---------------------------------------------------------------------------------------------------||LABEL|SPAN=TRUE",".|<html><b>Power Notes</b>||LABEL|SPAN=TRUE")]
[h,if(pReqs != ""): inputParams = json.append(inputParams, ".|<html> &nbsp;&nbsp; <b>Requirement:</b> "+pReqs+"</html>||LABEL|SPAN=TRUE")]
[h,if(phEff != ""): inputParams = json.append(inputParams, ".|<html> &nbsp;&nbsp; <b>Hit:</b> "+phEff+"</html>||LABEL|SPAN=TRUE")]
[h,if(pmEff != ""): inputParams = json.append(inputParams, ".|<html> &nbsp;&nbsp; <b>Miss</b> "+pmEff+"</html>||LABEL|SPAN=TRUE")]
[h,if(paEff != "" && targetDialog != 4): inputParams = json.append(inputParams, ".|<html> &nbsp;&nbsp; <b>Effect:</b> "+paEff+"</html>||LABEL|SPAN=TRUE")]
	[inputParams = json.append(inputParams, "optMods|Optional Modifiers||TAB",
	"tmpExpandCrit|0|This power has an expanded critical hit range|CHECK",
	"critRange|0|Enter lower end of expanded critical hit range here",
	"rollTwice|N/A,Highest,Lowest|This power allows two rolls. Roll twice and take the|LIST|SELECT=0",
	".|<html><i>Note: do not use this if you are using Oath of Enmity on the target</i></html>||LABEL|SPAN=TRUE")]
};
{
   [inputParams = json.append(inputParams, ".|"+paEff+"|<html><b>Effect:</b></html>|LABEL")]
 
};]


[h:newInputParams = json.toList(inputParams, "##")]
[h:status=input(newInputParams)]
[h:abort(status)]

<!--Target Post Processing-->

[h,switch(targetDialog),CODE:
case 0: { 
	[h:TargetName=listGet(expList,targetNum)]
	[h:targList=listAppend(targList,TargetName)]
};
case 1: {
	[h:Target1Name=listGet(expList,target1)]
	[h:Target2Name=listGet(expList,target2)]
	[h:targList=listAppend(targList,Target1Name)]
	[h:targList=listAppend(targList,Target2Name)]
};
case 4: {
	[h:targList = expList]
};
default: {
	[h,foreach(target, expList),if(eval("target"+roll.count)):targList = listAppend(targList,listGet(expList,roll.count))]
};]


<!--Handle Differing Cover-->
[h,if(targetDialog > 0): cover = "null"]

[h,switch(cover),code:
case 0: {[coverVal = 0][diffCover=1]};
case 1: {[coverVal = 2][diffCover=1]};
case 2:{[coverVal=5][diffCover=1]};
case "null": {};]

	[h,if(diffCover),code:
	{
      [if(targetDialog > 0): coverInfo = varyCover(targList); coverInfo = json.set("{}", targList, coverVal)]
	};
	{
	  [h:coverInfo=json.set("{}", "key", "0")]
	};]

<!--Handle Differing Combat Advantage-->
	[h,if(diffCA),code:
	{
	  [if(targetDialog > 0): caInfo = varyCA(targList); caInfo = json.set("{}", targList, 2)]
	};
	{
	  [h:caInfo=json.set("{}", "key", "0")]
	};]
	[h,if(tmpExpandCrit): critRangeLower = critRange; critRangeLower = 20]

[h,if(targetDialog == 0),token(targList): oath = if(state.Oath, 1, 0)]

[h,if(pTargets == "two creatures"),CODE:
{
   [checkTwoTargets(targList, targetFilter,pName)]
   [targList = macro.return]
}]
	
[h:currentAttackOptions = json.set("{}", "targets", targList, "miscBonus", MiscBonus,  "miscPen", MiscPenalty,"mdb", mdb, "rollTwice", rollTwice, "coverInfo", coverInfo, "caInfo", caInfo, "oath", oath, "expandCrit", critRangeLower)]