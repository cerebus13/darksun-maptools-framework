[macro("CallAttack@"+UseLib):
  json.set
  (
  "{}",
  "atkKey", 1,
  "atkName", "NAME",
  "atkType", 1,
  "atkTypeName", "At-Will",
  "keywords", "Weapon, Melee, Area, Ranged",
  "damageTypes", "REPLACE",
  "actionType", "REPLACE Action",
  "targetDefense", "AC",
  "rangeText", "Melee Weapon",
  "numTargetsText", "One Creature",
  "atkMod", '{"Bonus":13}',
  "damMod", '{"Bonus":5}',
  "damRoll", "1d8",
  "critDamRoll", "8",
  "effectText", "<b>On Hit:</b> Target is marked until the end of your next turn."
  )
]

<!-- Macro colors
At-Will = Lime/Black
Encounter = Red/White 
Trait/Other = Blue/White 
Recharge = Yellow/Black
Aura = Orange/Black
Triggered = Aqua/Black
-->

<!-- Conditions
"targetStateJson", '{1:["Stater"],2:["Stater"]}',

Dazed
Grabbed
Immobilized
Prone
Restrained
Slowed

Ongoing_necrotic
Ongoing_poison
Ongoing_damage

-->

<!-- HTML special characters
&lt;br&gt;
-->

<!-- Json Object of when to apply a Defense Modifier to target/self.  0 = miss, 1 = hit, 2 = crit, 3 = always -->
<!-- Nested Json Object keys: 0 = Target, 1 = Self -->
<!-- Array of Defense modifier Json object made up of 4 Key/Value pairs (modName, modValue, modDef [0=all,1=AC,2=Fort,3=Ref,4=Will], and modOwner) -->
<!-- Example: {"3":{"1":[{"modDef":1, "modName":"Priest's Shield", "modValue":1, "modOwner": "Udo"}]}} -->
<!-- Example: 3 = Perform Always, Nested 1 = To Self, apply Modifier Priest's Shield, as issued by Udo, to increase AC by 1 -->

<!-- Extra Stuff
  "atkKey", #,  // 1 = Attack with Atk & Dam rolls, 2 = Attack with only Atk roll, 3 = Attack with only Dam roll
                // 4 = AOE attack with Atk/Dam rolls, 5 = AOE attack with Atk roll only, 6 = AOE attack with Dam roll only  
                // 7 = Heal, 15 = Power that applies only states/marks, 20 = Utility
  "atkType", #,  // At-Will = 1, Encounter = 2, Daily = 3, Other = 4
  "markJson", '[1,2]',  // Json array of when to mark target.  0 = miss, 1 = hit, 2 = crit, 3 = always
  "targetStateJson", '{1:["Grabbed"],2:["Grabbed"]}',
  "selfStateJson", '{1:["Grabbed"],2:["Grabbed"]}',
  "modDefenseJson", strformat('{"3":{"1":[{"modDef":1, "modName":"Shield", "modValue":4, "modOwner": "%s"},{"modDef":3, "modName":"Shield", "modValue":4, "modOwner": "%s"}]}}',getName(),getName()),
  "modAttackJson", strformat('{"1":{"0":[{"modAtk": 1, "modName":"Dishearten", "modValue": -2, "modOwner": "%s"}]},"2":{"0": [{"modAtk": 1, "modName": "Dishearten", "modValue": -2, "modOwner": "%s"}]}}', getName(), getName())
  "critDamRoll", string(rollMax("2d6")),
  "missDamageRoll", -2,  // damage to roll on a miss, will not apply to minions. a -2 means do 1/2 of normal damRoll from previous
  "needMilestone", 1,
  "healMod", '{"Bonus":15}',  // flat modifier to HP heals
  "yesHeal", 1,     // heal power gives HPs
  "yesTempHP", 1,   // heal power gives TempHPs
  "healSurge", 1,   // heal Target's surge value
  "spendSurge", 1,  // spend a surge on the Target
  "healRoll", "1d6",  // roll to apply to HP heals
  "tempHPMod", '{"Bonus":15}',   // flat mod to TempHP heals
  "tempHPRoll", "1d4",           // roll to apply to TempHP heals
  "labelAppend", " (Recharge 6)",  // label to append to end of power that isn't an atkType 20 since Sam's code change
  "vulnResistJson", strformat('{"3":{"1": [{"modDef": 0, "modName": "All", "modValue": %d, "modOwner": "%s"}]}}', 5, getName()), // applies a 5 resist all modifier to self always
  [h:updateMacroLabel(" (Recharge 4)")] // use these updates for atkType 20 powers
  [h:updateMacroLabel(" (Used)")]
-->