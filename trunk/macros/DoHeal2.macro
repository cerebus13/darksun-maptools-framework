<!-- DoHeal2 macro -->
<!-- Returns: 4 -->
<!-- Parameters: 7 -->
<!-- This macro takes in a single target and information to resolve healing on that target -->

[h:targetName      = json.get(macro.args, 0)]
[h:healRoll        = json.get(macro.args, 1)]
[h:healVal         = json.get(macro.args, 2)]
[h:tempHPRoll      = json.get(macro.args, 3)]
[h:tempHPVal       = json.get(macro.args, 4)]
[h:useSurge        = json.get(macro.args, 5)]
[h:selfStateJson   = json.get(macro.args, 6)]  <!-- Json holding states to be applied to self with this power -->
[h:modDefenseJson  = json.get(macro.args, 7)]
[h:modAttackJson  = json.get(macro.args, 8)]

[h:emptyObjectJson="{}"]
[h:emptyJson="[]"]
[h:propSelfStatesJson   = getProperty("SelfStates")]
[h:selfName = getName()]
[h:switchToken(targetName)]

[h:healing = eval(string(healRoll))]
[h:totalHeal = healing + eval(string(healVal))]
[h:tmping = eval(string(tempHPRoll))]
[h:totalTemp = tmping + eval(string(tempHPVal))]

<!-- apply healing to target -->
[h:CHP = CurrentHP + totalHeal + if(useSurge,SurgeValue,0)]
[h,if(totalTemp>0 && totalTemp>TempHP):TempHP = totalTemp]
[h,if(CHP>MaxHP/2):state.Bloodied=0]
[h,if(CHP>MaxHP):CurrentHP = MaxHP;CurrentHP = CHP]
[h,if(useSurge):CurrentSurge = CurrentSurge-1]

[h:switchToken(selfName)]

<!-- apply states to Self -->
[h:setJsonStates(json.merge(if(length(json.get(propSelfStatesJson,3))>0,json.get(propSelfStatesJson,3),emptyJson),if(length(json.get(selfStateJson,3))>0,json.get(selfStateJson,3),emptyJson)),selfName)]

<!-- Apply only the Always mods to defense, type "3" -->
[h:decodeModDefenseJson(if(length(json.get(modDefenseJson,"3")) > 0,json.get(modDefenseJson,"3"),emptyObjectJson),targetName)]
[h:decodeModAttackJson(if(length(json.get(modAttackJson,"3")) > 0,json.get(modAttackJson,"3"),emptyObjectJson),targetName)]

[h:macro.return = json.append("[]",healing,totalHeal,tmping,totalTemp)]