<!-- callTarget macro -->
<!-- display a targetting dialog with all valid target choices, and present CA, cover and misc atk/dam modifiers to be applied -->

<!-- Parse parameter list -->
[h:maxRange=getStrProp(macro.args, "maxRange", 0)]
[h:atkNameText=getStrProp(macro.args, "atkNameText", 0)]
<!-- 1-3 are Single/Multi, 4-5 are AOE, 6 is Utility -->
[h:atkKey=number(getStrProp(macro.args, "atkKey", 0))]
[h:PCorNPCKey=number(getStrProp(macro.args, "PCorNPCKey", 0))]
[h:sourceKey=number(getStrProp(macro.args, "sourceKey", 0))]
[h:multiAtkNum=number(getStrProp(macro.args, "multiAtkNum", 1))]

[h:,if(atkKey<4),code:
{
  <!-- Single/Multi attack case -->
  [h:rangeFilter = json.set("{}", "token", if(sourceKey, "Reticle", getName()), "from", 0, "upto", maxRange, "distancePerCell", "false", "metric", "ONE_ONE_ONE")]
  [h:targetFilter = json.set("{}", "pc", if(PCorNPCKey==2 || PCorNPCKey==3, 1, 0), "npc", if(PCorNPCKey==1 || PCorNPCKey==3, 1, 0), "unsetStates", json.append("[]", "Dead", "Reticle"), "visible", 1, "range", rangeFilter)]

  [h:getTargetList = getTokenNames(",", targetFilter)]
  [h,if(length(getTargetList)==0):assert(0, rangeError(), 0)]
  [h:getTargetList = listAppend(getTargetList, "None")]
  <!-- getTargetList should now be a list of valid targets with None on the end of it -->

  <!-- Build the string for the targeting dialog -->
  [h:inputParams=json.append("[]","modTab|Modifiers||TAB","junk|<html><b>Use Power: "+atkNameText+"</b></html>||LABEL|SPAN=TRUE")]
  [h:json.append(inputParams,
    ".|---------------------------------------------------------------------------------------------------||LABEL|SPAN=TRUE",
    "CA|None,All,Varies|Combat Advantage vs. Targets|RADIO|ORIENT=H",
    "cover|None,Regular(-2),Superior(-5),Varies|Cover vs. Targets (All)|RADIO|ORIENT=H",
    "miscAtk|0|<html>Miscellaneous <b>modifier</b> to attack (enter 999 for varies)</html>",
    "miscDam|0|<html>Miscellaneous <b>modifier</b> to damage (enter 999 for varies)</html>"
  ]
  [h:json.append(inputParams,"targetTab|Modifiers||TAB")]
  [h:for(i,1,multiAtkNum+1,1,""):json.append(inputParams,"targetNum"+i+"|"+getTargetList+"|Select Target "+i+"|LIST|SELECT=0 VALUE=STRING")]
  [h:newInputParams = json.toList(inputParams, "##")]

  [h:status = input(newInputParams)]
  [h:abort(status)]

  <!-- Assemble the list of target names from all target dropdowns in the target tab -->
  [h,count(multiAtkNum): targetNameList = if(indexValueStrProp(targetTab,roll.count-1)!="None",listAppend(targetNameList,indexValueStrProp(targetTab,roll.count-1)),targetNameList)]
};{
  <!-- AOE attack case -->
  [h:rangeFilter = json.set("{}", "token", if(sourceKey, "Reticle", getName()), "from", 0, "upto", maxRange, "distancePerCell", "false", "metric", "ONE_ONE_ONE")]
  [h:targetFilter = json.set("{}", "pc", if(PCorNPCKey==2 || PCorNPCKey==3, 1, 0), "npc", if(PCorNPCKey==1 || PCorNPCKey==3, 1, 0), "unsetStates", json.append("[]", "Dead", "Reticle"), "visible", 0, "range", rangeFilter)]
  
  [h:getTargetList = getTokenNames(",", targetFilter)]
  [h,if(length(getTargetList)==0):assert(0, rangeError(), 0)]
  <!-- getTargetList should now be a list of valid targets -->
  
  <!-- Build the string for the targeting dialog -->
  [h:inputParams=json.append("[]","junk|<html><b>Use Power: "+atkNameText+"</b></html>||LABEL|SPAN=TRUE")]
  [h:json.append(inputParams,
    ".|---------------------------------------------------------------------------------------------------||LABEL|SPAN=TRUE",
    "CA|None,All,Varies|Combat Advantage vs. Targets|RADIO|ORIENT=H",
    "cover|None,Regular(-2),Superior(-5),Varies|Cover vs. Targets (All)|RADIO|ORIENT=H",
    "miscAtk|0|<html>Miscellaneous <b>modifier</b> to attack (enter 999 for varies)</html>",
    "miscDam|0|<html>Miscellaneous <b>modifier</b> to damage (enter 999 for varies)</html>"
  ]
  [h:newInputParams = json.toList(inputParams, "##")]

  [h:status = input(newInputParams)]
  [h:abort(status)]
  [h:targetNameList=getTargetList] 
}]

<!-- create 4 simple lists for the combat mods: CA, cover, miscAtk, and miscDamage.  indexing in the list matches up to the targetList -->
[h:caList=""]
[h:coverList=""]
[h:miscAtkList=""]
[h:miscDamList=""]
<!-- check if one of the "for all" options is chosen for mods, and fill the entire list with their values if so -->
[h,if(cover==1),code:
  [h,count(listCount(targetNameList)): coverList = listAppend(coverList,-2)]
};{}]
[h,if(cover==2),code:
  [h,count(listCount(targetNameList)): coverList = listAppend(coverList,-5)]
};{}]
[h,if(CA==1),code:
  [h,count(listCount(targetNameList)): caList = listAppend(caList,2)]
};{}]
[h,if(miscAtk!=0 && miscAtk!=999),code:
  [h,count(listCount(targetNameList)): miscAtkList = listAppend(miscAtkList,miscAtk)]
};{}]
[h,if(miscDam!=0 && miscDam!=999),code:
  [h,count(listCount(targetNameList)): miscDamList = listAppend(miscDamList,miscDam)]
};{}]

<!-- If any of the 4 mods available from the target input are set to varied, start building an input string for a tabbed window for them -->
[h,if(cover==3 || CA == 2 || miscAtk == 999 || miscDam == 999),code:
  [h,if(cover==3): inputParamsCover=json.append("[]","coverTab|Cover||TAB")]
  [h,if(CA==2): inputParamsCA=json.append("[]","caTab|CA||TAB")]
  [h,if(miscAtk==999): inputParamsAtk=json.append("[]","atkTab|Misc Atk Mod||TAB")]
  [h,if(miscDam==999): inputParamsDam=json.append("[]","damTab|Misc Dam Mod||TAB")]
  
  [h,foreach(j,targetNameList),code:
  {
    [h,if(cover==3): json.append(inputParamsCover,"cover"+j+"|None,Regular(-2),Superior(-5)|Cover vs. "+listGet(targetNameList,j)+"|RADIO|ORIENT=H")]
    [h,if(CA==2): json.append(inputParamsCA,"CA"+j+"|No,Yes|CA vs. "+listGet(targetNameList,j)+"|RADIO|ORIENT=H")]
    [h,if(miscAtk==999): json.append(inputParamsAtk,"miscAtk"+j+"|0|<html>Miscellaneous <b>modifier</b> to attack vs.</html> "+listGet(targetNameList,j)+"|TEXT")]
    [h,if(miscDam==999): json.append(inputParamsDam,"miscDam"+j+"|0|<html>Miscellaneous <b>modifier</b> to attack vs.</html> "+listGet(targetNameList,j)+"|TEXT")]
  }]
  
  [h:inputParams = json.merge(inputParamsCover,inputParamsCA,inputParamsAtk,inputParamsDam)]
  [h:newInputParams = json.toList(inputParams, "##")]
  [h:status = input(newInputParams)]
  [h:abort(status)]
};{}]

<!-- parse each of the 4 tabs into their lists -->
[h,if(cover==3),code:
  [h,count(listCount(targetNameList)),code: 
  {
    [tmpCover = indexValueStrProp(coverTab, roll.count-1)]
    [switch(tmpCover):
      case 1: tmpCover = -2
      case 2: tmpCover = -5
      default: tmpCover = 0
    ]
    [coverList = listAppend(coverList,tmpCover)]
  }]
};{}]
[h,if(CA==1),code:
  [h,count(listCount(targetNameList)): caList = listAppend(caList,if(indexValueStrProp(caTab, roll.count-1)==1,2,0))]
};{}]
[h,if(miscAtk==999),code:
  [h,count(listCount(targetNameList)): miscAtkList = listAppend(miscAtkList,indexValueStrProp(atkTab, roll.count-1))]
};{}]
[h,if(miscDam==999),code:
  [h,count(listCount(targetNameList)): miscDamList = listAppend(miscDamList,indexValueStrProp(damTab, roll.count-1))]
};{}]

<!-- output variables: targetNameList, coverList, caList, mistAtkList, miscDamList -->
<!-- targetNameList = list of target names, such as: targetNameList = Jim, Bob, Joe -->
<!-- if any of the 4 number lists are all 0s they just aren't passed -->
<!-- coverList = list of numbers (0, -2, or -5) that shows the amount of cover penalty that indexed target (corresponding to targetNameList) has applied to it -->
<!-- caList = list of numbers (0, or 2) that shows the amount of CA bonus that indexed target (corresponding to targetNameList) has applied -->
<!-- miscAtkList = list of numbers (0 or otherwise) that shows the amount of misc attack bonus that indexed target (corresponding to targetNameList) has applied -->
<!-- miscDamList = list of numbers (0 or otherwise) that shows the amount of misc damage bonus that indexed target (corresponding to targetNameList) has applied -->
[h:macro.return = "targetNameList=" + encode(targetNameList) + ";"]
[h,if(cover!=0): macro.return = macro.return + "coverList=" + encode(coverList) + ";"]
[h,if(CA!=0): macro.return = macro.return + "caList=" + encode(caList) + ";"]
[h,if(miscAtk!=0): macro.return = macro.return + "miscAtkList=" + encode(miscAtkList) + ";"]
[h,if(miscDam!=0): macro.return = macro.return + "miscDamList=" + encode(miscDamList) + ";"]