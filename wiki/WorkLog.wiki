#summary Coding work done on given dates
#labels worklog,darksun

= Introduction =

A simple journal detailing the coding work I've gotten done on a given day.

===04/10/2010===

  * Added Swarm support to DoAttack2, and a Swarm property to tokens.  Had to create a whole separate wiki page dedicated to random comments on this framework because there are so many oddities you need to know to get it to work right.
  * Got Vulns/Resists working in DoAttack2.  Added a small bit to check for "All" in any of the 4 jsons related to these and to always apply the affect for it despite what Keywords may be on an attack.  Further testing before check-in.
  * Had to seperate keywords into keywords/damageTypes in CallAttack so I can parse through just the actual damage types when determining Resists.  Forgot that Resists have the goofy wording when you are going against multiple damage types: "Your resistance is ineffective against combined damage types unless you have resistance to each of the damage types, and then only the weakest of the resistances applies."
  * Spent a ton of time polishing the code in DoAttack2 to get Resists to work right.  Ran into a couple of retard Maptools issues:
    * The json.subset() function DOES NOT EXIST despite what the maptools wiki says.
    * Using lots of nested code with json lookups in if() statements doesn't work for dick, so had to use lots of temp variables to store function calls and crap that I shouldn't have to.
    * Using the Set-Notation functions for jsons (union,intersection,difference) is a pain in the ass, avoid it unless you have no other recourse.  In my case I was forced to either use this or do a damn for-loop parsing of paired jsons because json.subset() is missing.
  * Checked in code for Vuln/Resist mess, (r52).  Might test some more and make revisions if needed.

===04/07/2010===

  * Added Insubstantial to Campaign Props, and then implemented it inside DoAttack2.  Added comments for spots where I am going to deal with Resists/Vulns and even Swarms above Insubstantial...because it applies last.
  * Cleaned up a possible bug in DoAttack2.
  * Fixed DefineFunction calls for decodeVulnResistJson and applyVulnResistJson so they get a new variable scope.

===04/06/2010===

  * Got the correct format for a nested Object/Array Json worked out and put into the wiki for the CallAttack macro comments.
  * Finally got Resists/Vulns to apply to target and self through a passed Json in a power.
  * With _application_ of Vulns/Resists worked out, now I need to work on getting DoAttack2 to respect them based on Keywords of power and Keywords of Resist/Vuln that are present.  Don't forget to handle Generic...
  * Had a Piercing (resist avoidance) property I wanted to implement for powers or as a property on a token, curious if I should bother with that now or just leave it on the wish list.
  * When working on DoAttack2 I should toss a property on tokens to indicate if they are Insubstantial and half damage.  Swarms also half damage from melee/ranged attacks, but have a variable Vuln to Area/Close so I'm not sure how to implement that quite yet.